requirements:
  title: "APIテスト (実践編)"
  target_audience:
    - 単体テスト入門を受講済みのエンジニア
    - CI/CD導入を検討している開発チーム
    - Node.js + Serverlessアプリケーションの品質保証を強化したいエンジニア
  duration: 50
  objectives:
    high_level:
      - 前回の復習を通じてテストの基礎と今回のゴールを明確化
      - テストカバレッジを活用し、品質を可視化できるようにする
      - CI/CD環境での自動テスト実行・レポート共有を導入
      - 結合テスト・E2Eテストの意義と導入ステップを理解する
    detailed:
      - Vitestでのカバレッジレポート取得とHTML出力方法
      - カバレッジをGitHub Pagesなどで公開し、チーム全体が閲覧可能な仕組みを紹介
      - GitHub Actionsなどを用いたCI/CDパイプラインでのテスト自動化
      - リスクベーステストやリファクタリング時のテスト保守運用のポイント
      - 結合テスト・E2Eテストの概要とAPIテストからの拡張方針

  prerequisites:
    environment:
      - 前回の「APIテスト (入門)」内容の理解
      - Node.js/NPM環境 (v14以上推奨)
      - GitHubリポジトリ（GitHub Actions 例示のため）
      - ある程度のAWS LambdaやExpress、Serverless Framework知識
    codebase:
      - 前回構築したVitest + handler.js + logic.js + モックDBの構成
      - カバレッジを取得できるようにvitest.config.js等で最低限の設定追加
      - CI用ワークフロー（GitHub Actions）ファイルのひな形

scenario:
  phases:

    introduction:
      duration: 5
      steps:
        recap_previous_session:
          - "前回のAPIテスト入門の復習 (TDDの流れ、Vitestの基本)"
          - "単体テスト導入によるメリット (品質向上・早期バグ発見など) を再確認"
        goal_of_this_session:
          - "今回の実践編ではカバレッジやCI/CD、テスト計画を導入し、より現場に近い運用を体験"
          - "結合テスト・E2Eテストへのステップも紹介"

    coverage:
      duration: 10
      steps:
        coverage_concepts:
          - "ステートメント・ライン・ブランチ・関数カバレッジなどの概念"
          - "カバレッジとバグ検出率の関係 (100%が万能でないことも強調)"
        coverage_setup_vitest:
          - "Vitestでカバレッジを取得するコマンドやvitest.config.jsの設定"
          - "npx vitest --coverage 実行後、coverageディレクトリからHTMLレポート確認"
        coverage_utilization:
          - "レポートから見えるテスト漏れ・分岐漏れの洗い出し方"
          - "リスクベーステストを組み合わせて重点検証箇所を特定"

    page_publication:
      duration: 5
      steps:
        coverage_report_sharing:
          - "AWS S3上にカバレッジレポート(HTML)を配置することで社内から簡単に参照可能に"
          - "（前提）S3バケットは既に作成・設定済み。S3 URLは社内VPNや特定のACLで限定公開できる"
        s3_upload_example:
          - "GitHub Actions でカバレッジ生成後、AWS CLI や github-actions/aws-s3 プラグインなどでレポートをS3に自動アップロードする例"
          - "アップロードした後の S3 のURLを通知/共有するフロー"
        doc_merit:
          - "HTMLレポートを常に最新化 → Pull Requestレビューや新メンバーの学習に活用可能"
          - "世界中に公開される懸念がなく、適切な権限設定でセキュアに運用"

    ci_cd:
      duration: 10
      steps:
        pipeline_overview:
          - "CI/CDとは何か (自動ビルド・テスト・デプロイ)"
          - "なぜAPIテストをCI/CDに組み込むと良いのか (回帰バグの早期発見)"
        coverage_report_auto:
          - ".github/workflows/test.yml 例：Pull Request時に自動テスト＆カバレッジ実行"
          - "生成されたレポートをArtifactsやGitHub Pagesへ自動アップロードする流れ"
        local_precommit_check:
          - "huskyやlint-stagedを用いたコミット前テスト → 小さな単位でバグを封じ込め"
          - "ローカルとCI/CDの二段構えでバグ検知率を上げる"

    advanced_topics:
      duration: 10
      steps:
        test_plan_risk_based:
          - "リスクが高い（ビジネスインパクトが大きい）箇所から優先的にテスト"
          - "テストケース洗い出し（正常系・異常系・境界値・外部連携）と優先度設定"
        refactoring_maintenance:
          - "リファクタリングや仕様変更時にテストをどの程度修正するか"
          - "冗長・重複テストの整理や不要テストの削除、定期的なテストレビュー"
        other_future:
          - "負荷テスト・セキュリティテスト・契約テストなど、今後の拡張方針"
          - "プロダクトの成長にあわせたテスト自動化のスケーリング"

    integration_e2e:
      duration: 5
      steps:
        integration_test_significance:
          - "結合テスト（Integration Test）でモジュール間連携の問題を発見"
          - "API Gateway ⇔ Lambda ⇔ DBの実際の疎通確認など"
        e2e_test_introduction:
          - "E2Eテスト(Playwright/Cypress等)でフロントエンド→バックエンドの一連の流れを検証"
          - "ユーザー視点の操作シナリオを自動化し、全体的な不具合を早期発見"
        how_to_start:
          - "まずは結合テストから始めて、段階的にE2Eへ拡大"
          - "単体・結合・E2Eのバランスを取りつつ高品質を担保"

    conclusion:
      duration: 1
      steps:
        wrap_up:
          - type: "50分のまとめ"
            why: "今回学んだカバレッジ/CI/CD/結合テストなどのエッセンスを再確認"
            scenario:
              - "継続的な自動テストとレポートの共有で品質と開発速度を両立"
              - "段階的にテストを拡張しながら、チーム全体での品質文化を醸成"
            outcomes:
              - "今後のAPIテスト強化やE2E、負荷テストなどへの布石"
